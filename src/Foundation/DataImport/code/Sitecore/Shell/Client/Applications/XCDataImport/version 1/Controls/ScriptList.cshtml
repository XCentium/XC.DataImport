@using Sitecore
@using Sitecore.Mvc
@using Sitecore.Mvc
@using Sitecore.Mvc.Presentation
@using Sitecore.Web.UI.Controls.Charts.Legacy
@using Sitecore.Web.UI.Controls.Common.UserControls
@using Sitecore.Web.UI.Controls.Data
@using XC.Foundation.DataImport.UI.Controls

@model RenderingModel

@{
    var listControl = new ScriptListControl(new DatasourceBasedParametersResolver(Model.Rendering));
    listControl.GetString("Items", "Items");
    listControl.GetString("TemplateFields", "TemplateFields");
    listControl.GetString("Templates", "Templates");
    listControl.Requires.Clear();
    listControl.Requires.Script("client","Applications/XCDataImport/version 1/Controls/ScriptList.js");
    listControl.Class = "sc-scriptlistcontrol";

    listControl.Attributes["data-bind"] = "visible: isVisible";
    listControl.Attributes["data-sc-contextlanguage"] = Sitecore.Context.Culture.IetfLanguageTag;
    listControl.Attributes["data-sc-contentlanguage"] = listControl.GetString("ContentLanguage", "contentLanguage", string.Empty);
    listControl.Attributes["data-sc-defaultselecteditemsd"] = listControl.GetString("DefaultSelectedItemId", "defaultSelectedItemId", string.Empty);
    listControl.Attributes["data-sc-sorting"] = listControl.GetString("Sorting", "sorting");
    listControl.Attributes["data-sc-allowmultiplecolumnsorting"] = listControl.GetBool("AllowMultipleColumnSorting", "AllowMultipleColumnSorting", true).ToString().ToLower();

    var iconViewDisplayFieldName = listControl.GetString("IconViewDisplayFieldName", "iconViewDisplayFieldName", "$displayName");

    var htmlAttributes = listControl.HtmlAttributes;
    var id = listControl.ControlId;
    var behaviors = listControl.GetString("Behaviors");
}

<script data-layout-main="@id" type="text/x-sc-scriptlistcontrol">
    @Html.Raw(listControl.RenderMainLayout())
</script>

<script data-layout-header="@id" type="text/x-sc-scriptlistcontrol">
    @Html.Raw(listControl.RenderHeader())
</script>

<script data-layout-row="@id" type="text/x-sc-scriptlistcontrol">
    @Html.Raw(listControl.RenderRow())
</script>

<script data-layout-emptyrow="@id" type="text/x-sc-scriptlistcontrol">
    @Html.Raw(listControl.RenderRow())
</script>

<script data-layout-iconList="@id" type="text/x-sc-scriptlistcontrol">
</script>

<script data-layout-footer="@id" type="text/x-sc-scriptlistcontrol">
    @Html.Raw(listControl.RenderFooter())
</script>
<script data-layout-scriptlistcontrol="@id" type="text/x-sc-scriptlistcontrol">
    @Html.Raw(listControl.RenderListControl())
</script>

<script @String.Format("data-layout-icon{0}", id)="@id" type="text/x-sc-scriptlistcontrol">
    <div class="sc-iconList-item" data-bind="style: {height: maxIconSize, width: maxIconSize}">
        <div class="sc-iconList-item-content" data-bind="style: {lineHeight: maxIconSize}">
            <a data-bind="attr: {href: $url}">
                <img data-bind="attr: {src: image}, style: {maxHeight: maxIconSize, maxWidth: maxIconSize}" />
            </a>
            <div class="sc-iconList-item-title">
                <span data-bind="text: @iconViewDisplayFieldName"></span>
            </div>
            <div class="sc-iconList-item-caption">
                <a data-bind="attr: {href: $url}, text: @iconViewDisplayFieldName"></a>
                <table>
                    <tr>
                        @Html.Raw(listControl.RenderHeader())
                    </tr>
                    <tr>
                        @Html.Raw(listControl.RenderRow())
                    </tr>
                </table>
            </div>
        </div>
    </div>
</script>

<script data-layout-tileList="@id" type="text/x-sc-scriptlistcontrol">
</script>

<script @String.Format("data-layout-tile{0}", id)="@id" type="text/x-sc-scriptlistcontrol">
    @if (!string.IsNullOrEmpty(listControl.TileHtmlFileName))
    {
        Html.RenderPartial(listControl.TileHtmlFileName);
    }
</script>

<div data-sc-behaviors="@behaviors" @htmlAttributes>
</div>